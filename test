#!/usr/bin/python
# Testing, testing ... 

from flask import Flask
from flask import Markup
from flask import render_template, render_template_string
from flask import flash, url_for, redirect
from flask import request, session, g
from flask.ext import login as poop

import os, sys, optparse
import psycopg2 as pgdb
import seaice

login_manager = poop.LoginManager()

app = Flask(__name__)
app.secret_key = "Joseph D. Sanders"

## Setup logging on ##


class User:

  def __init__(self, Id, Name): 
    self.Id = Id
    self.Name = Name
    self.logged_in = False
  
  def is_authenticated(self):
    return self.logged_in

  def is_active(self):
    return self.logged_in

  def is_anonymous(self):
    return False

  def get_id(self):
    return unicode(self.Id)

class AnonymousUser(User): 
  def __init__(self): 
    self.Id = self.Name = None
    self.logged_in = False


login_manager.init_app(app)
login_manager.anonymous_user = AnonymousUser

# This is a DB. 
users = { 1 : User(1, 'Paul'), 
          2 : User(2, 'Friedrich'),
          3 : User(3, 'Tim') }
    

@login_manager.user_loader
def load_user(userid): 
  # This will be a DB query. 
  return users.get(int(userid))

## HTTP request handlers ##

@app.route("/")
def index():
  return '''index <a href="/stuff">stuff</a>
         You are logged in as %s''' % poop.current_user.Name

@app.route("/login", methods = ['POST', 'GET'])
def login():
  if request.method == 'POST':
    # authenticate, get user id. Associate SI.Users row with instance of User.
    user = users.get(int(request.form['user_id']))
    if user: 
      user.logged_in = True
      poop.login_user(user)
      flash("Logged in successfully.")
      return redirect(request.args.get("next") or url_for("index"))
    else:
      return "login failed!"

  form = Markup("""
    <form action="" method="post">
      <p><input type=text name=user_id>
      <p><input type=submit value=Login>
    </form>""")
  
  return render_template_string(form)

@app.route('/logout')
@poop.login_required
def logout():
  poop.current_user.logged_in = False
  poop.logout_user()
  return 'logout'

@login_manager.unauthorized_handler
def unauthorized():
  return Markup("""
    You need to login first to do that!
    <form action="login" method="post">
      <p><input type=text name=user_id>
      <p><input type=submit value=Login>
    </form>""")

@app.route('/stuff')
@poop.login_required
def stuff():
  return 'This is some stuff you can only access if you\'re logged in. You are %s' % poop.current_user.Name


## Start HTTP server. ##

if __name__ == '__main__':
    app.debug = True
    app.run('0.0.0.0', 5000)

