7/3/13

When the DB is reset and exported terms are imported, this causes a conflict 
with the autoincrementing Terms.id. Either figure out how to add a trigger 
that sets the next assigned id on insert -OR- do this check in the Python
insertTerm/Comment/User code. 



Three levels of db acces: 
root - drop/create table, read/write queries
read - only do read queries
write - read/write queries

render_template_string(source_string, context)

6/4/13

sudo apt-get install python-flask python-pip mysql-server

sudo pip install configparser

``Name'' is probably good for ``TermString''

SeaIceDb.cur attribute? The quesiton is whether MySQL serializes
transactions across cursors or only within one. 

The API handles db entries as dictionaries. I'll prboably do this with tuples
instead, since this is more efficient. 

Here are the development stages: 

1. Basic functionality: add/delete/look-up term. Database, API, command-line UI. 

2. Web UI, term ownership, user credentials. Term population, browse terms. 

3. Term discovery via definition search, edit definition form. 

4. Term comment history. 

5. add/delete/look-up relations, discovery via related terms. 

6. Basic scoring (up/down vote), rank search results by score and last
modified. 

7. Vernacular, canon, and archive. Call for votes (term frozen) period.

8. "Elder" nomination (What is an Elder?), refinements to voting scheme.

9. Catch-up and clean up. If time, enhanced term discovery via NLP.  

