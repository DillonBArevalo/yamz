Earning reputation: 
vernacular <-> canonical  100
vernacular <-> deprecated 0 
 +10 per vote to start, diminishing returns. 
 Shifted gaussian curve. 
 R = C * e^-((x/D)^2) - http://en.wikipedia.org/wiki/Gaussian_function

Tomorrow: 

  definite integral of R = 1 + e^-x ? R = x - e^-x - 1. (How to adapt this
  for score??)



Currently, the dbPool is made of write level access. Eventually I want to
implement three levels. Since Heroku-Postgres doesn't allow you to do to
create roles, maybe this can be accomplished with views. 
root - drop/create table, read/write queries
read - only do read queries
write - read/write queries

Here are the development stages: 

1. DONE Basic functionality: add/delete/look-up term. Database, API, 
   command-line UI. 

2. DONE Web UI, term ownership, user credentials. Term population, browse 
   terms. 

3. DONE Term discovery via definition search, edit definition form. 

4. DONE Term comment history. 

5. add/delete/look-up relations, discovery via related terms. 

6. DONE Basic voting (up/down vote), TODO scoring and rank search results by 
   score and last modified. 

7. Vernacular, canon, and archive. Call for votes (term frozen) period.

8. "Elder" nomination (What is an Elder?), refinements to voting scheme.

9. Catch-up and clean up. If time, enhanced term discovery via NLP.  

